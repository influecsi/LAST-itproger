from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from bot.parser.itproger_parser import ITProgerParser
from bot.keyboards.inline import get_article_keyboard
from bot.handlers.user_handlers import user_articles, user_current_index, show_article, show_fast_article
import logging

logger = logging.getLogger(__name__)

async def handle_next_article(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏"""
    user_id = callback.from_user.id
    data = callback.data.split(":")[1]
    
    try:
        article_index = int(data)
        await callback.message.delete()
        await show_article(callback.message, user_id, article_index)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏")
    
    await callback.answer()

async def handle_full_content(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏"""
    user_id = callback.from_user.id
    article_url = callback.data.split(":")[1]
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async with ITProgerParser() as parser:
        content_data = await parser.get_article_content(article_url)
    
    if content_data and content_data["content"]:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram limit ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        content = content_data["content"]
        if len(content) > 4000:
            content = content[:4000] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        await callback.message.answer(
            f"<b>üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:</b>\n\n{content}",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏")

async def handle_page_change(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    page = int(callback.data.split(":")[1])
    
    await callback.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü

def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_callback_query_handler(handle_next_article, lambda c: c.data.startswith("next_article:"))
    dp.register_callback_query_handler(handle_full_content, lambda c: c.data.startswith("full_content:"))
    dp.register_callback_query_handler(handle_page_change, lambda c: c.data.startswith("page:"))