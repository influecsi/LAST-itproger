from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from bot.parser.itproger_parser import ITProgerParser
from bot.keyboards.reply import get_main_keyboard
from bot.keyboards.inline import get_article_keyboard
import logging
import asyncio

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_articles = {}
user_current_index = {}

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    welcome_text = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT News Bot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö IT –Ω–æ–≤–æ—Å—Ç–µ–π —Å itproger.com\n\n"
        "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /news - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚Ä¢ /fast_news - –±—ã—Å—Ç—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)\n"
        "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚Ä¢ üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏\n\n"
        "‚ö° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fast_news –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏!"
    )
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode='HTML')
    logger.info("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def cmd_fast_news(message: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    progress_msg = await message.answer("‚ö° –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    
    async with ITProgerParser() as parser:
        articles = await parser.get_news_list(page=1)
    
    if not articles:
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_articles[user_id] = articles
    user_current_index[user_id] = 0
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await progress_msg.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await show_fast_article(message, user_id, 0)

async def show_fast_article(message: types.Message, user_id: int, article_index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—å—é –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
    articles = user_articles.get(user_id)
    
    if not articles or article_index >= len(articles):
        await message.answer("‚ùå –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–Ω–æ–≤–∞.")
        return
    
    article = articles[article_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üì∞ <b>{article['title']}</b>\n\n"
        f"{article['description']}\n\n"
        f"üìé <a href='{article['url']}'>–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>\n\n"
        f"<i>–°—Ç–∞—Ç—å—è {article_index + 1} –∏–∑ {len(articles)}</i>"
    )
    
    await message.answer(
        text,
        reply_markup=get_article_keyboard(
            article['url'], 
            article_index, 
            len(articles)
        ),
        parse_mode='HTML',
        disable_web_page_preview=True
    )

async def show_latest_news(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    progress_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    async with ITProgerParser() as parser:
        articles = await parser.get_news_list(page=1)
    
    if not articles:
        await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_articles[user_id] = articles
    user_current_index[user_id] = 0
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await progress_msg.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
    await show_article(message, user_id, 0)

async def show_article(message: types.Message, user_id: int, article_index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    articles = user_articles.get(user_id)
    
    if not articles or article_index >= len(articles):
        await message.answer("‚ùå –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–Ω–æ–≤–∞.")
        return
    
    article = articles[article_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    caption = (
        f"<b>{article['title']}</b>\n\n"
        f"{article['description']}\n\n"
        f"<i>–°—Ç–∞—Ç—å—è {article_index + 1} –∏–∑ {len(articles)}</i>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if article['image']:
        try:
            await message.answer_photo(
                photo=article['image'],
                caption=caption,
                reply_markup=get_article_keyboard(
                    article['url'], 
                    article_index, 
                    len(articles)
                ),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await message.answer(
                caption,
                reply_markup=get_article_keyboard(
                    article['url'], 
                    article_index, 
                    len(articles)
                ),
                parse_mode='HTML'
            )
    else:
        await message.answer(
            caption,
            reply_markup=get_article_keyboard(
                article['url'], 
                article_index, 
                len(articles)
            ),
            parse_mode='HTML'
        )

async def refresh_news(message: types.Message):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_articles:
        del user_articles[user_id]
    if user_id in user_current_index:
        del user_current_index[user_id]
    
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.")

def register_user_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_message_handler(cmd_fast_news, commands=["fast_news"])
    dp.register_message_handler(show_latest_news, commands=["news"])
    dp.register_message_handler(show_latest_news, lambda message: message.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    dp.register_message_handler(refresh_news, lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")